using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["liblbfgsb"], :liblbfgsb),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/Gnimuc/L-BFGS-B-Builder/releases/download/v3.0.2"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/LBFGSB.v3.0.0.aarch64-linux-gnu.tar.gz", "ad751de7a8ce6fd988bc95a6d43fa72c6c3231809ff3b24aef1f8c41e7783693"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/LBFGSB.v3.0.0.aarch64-linux-musl.tar.gz", "5cb91124d30a6d049b42fee4f369f4877d4fd131bbea1296304cde5c607ef31d"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/LBFGSB.v3.0.0.arm-linux-gnueabihf.tar.gz", "b05a235f9b2580d752ad58578ce98d5ddbb67c3cabf174fd2f5f04f462d9ed9b"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/LBFGSB.v3.0.0.arm-linux-musleabihf.tar.gz", "76a5ab1f6ad3d328355297c05f39127eddda88cdf0d72f619cf0f0c938926153"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/LBFGSB.v3.0.0.i686-linux-gnu.tar.gz", "f00679b7380b86a375a164f66c7ffe08b0c442e708bb2c42da75de6b83f6a6f2"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/LBFGSB.v3.0.0.i686-linux-musl.tar.gz", "cde01e8e1ca70b45275b73e98a4fa2aba26de2b4903ec1b7b65dc474d2868bc4"),
    Windows(:i686) => ("$bin_prefix/LBFGSB.v3.0.0.i686-w64-mingw32.tar.gz", "08940a9189945e25d130edc8bc3d388ad26e324af018ba2d3956cb90083802aa"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/LBFGSB.v3.0.0.powerpc64le-linux-gnu.tar.gz", "4adbf4a041c487db598fd805948bf80b58f9f115c30c23f96dc15538bd8a25ae"),
    MacOS(:x86_64) => ("$bin_prefix/LBFGSB.v3.0.0.x86_64-apple-darwin14.tar.gz", "e80012f7fccb29a42d281f7f478119e1c38758c9fa903d3e41dd52733df97b4b"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/LBFGSB.v3.0.0.x86_64-linux-gnu.tar.gz", "66f668f6138987d8aaf4a047226f4d28d30f0c0f65ca3d77296a5e775e73d68a"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/LBFGSB.v3.0.0.x86_64-linux-musl.tar.gz", "586e43eab77938721751cec21e3684fe6fe834c3f0af7f6b5bbe17f445127d19"),
    FreeBSD(:x86_64) => ("$bin_prefix/LBFGSB.v3.0.0.x86_64-unknown-freebsd11.1.tar.gz", "aab6a5ebcdb8fa0be16dd5e523d28859a51dc269a4446b4366cdedacd1182381"),
    Windows(:x86_64) => ("$bin_prefix/LBFGSB.v3.0.0.x86_64-w64-mingw32.tar.gz", "ce6aa4ca42e8fe20bf437ccaf3fb8c26c1538d05d872d475e919e93900dfbd5b"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
if haskey(download_info, platform_key())
    url, tarball_hash = download_info[platform_key()]
    if unsatisfied || !isinstalled(url, tarball_hash; prefix=prefix)
        # Download and install binaries
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    end
elseif unsatisfied
    # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform $(triplet(platform_key())) is not supported by this package!")
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
