using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["liblbfgsb"], :liblbfgsb),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/Gnimuc/L-BFGS-B-Builder/releases/download/v3.0.0-2"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, :glibc) => ("$bin_prefix/LBFGSB.v3.0.0.aarch64-linux-gnu.tar.gz", "1d19f1dbb09a77af215bb85fab7d0c8fd912c1c99e6cff5c2d3007399b2ec858"),
    Linux(:aarch64, :musl) => ("$bin_prefix/LBFGSB.v3.0.0.aarch64-linux-musl.tar.gz", "dba993a648cd135d276334ee11cf971fbf87e2db075bbc02948a1bb072a7c583"),
    Linux(:armv7l, :glibc, :eabihf) => ("$bin_prefix/LBFGSB.v3.0.0.arm-linux-gnueabihf.tar.gz", "4dc4ecbd37be1bde7477e31b2416697afa48ee9f9c52349e1a0befc898bc7097"),
    Linux(:armv7l, :musl, :eabihf) => ("$bin_prefix/LBFGSB.v3.0.0.arm-linux-musleabihf.tar.gz", "62fd0ff682eb443f4248082dbc5a6e094b528a3d78a356c86151561622bf7486"),
    Linux(:i686, :glibc) => ("$bin_prefix/LBFGSB.v3.0.0.i686-linux-gnu.tar.gz", "e7bbc02224b262d68c4edafc434686093b84eb56a3bf1c1d5865ac7bb2ba8c96"),
    Linux(:i686, :musl) => ("$bin_prefix/LBFGSB.v3.0.0.i686-linux-musl.tar.gz", "03016e5b08d241452da51272fd1667156a0d42c521b80e53ef984fcfcb723913"),
    Windows(:i686) => ("$bin_prefix/LBFGSB.v3.0.0.i686-w64-mingw32.tar.gz", "c3174c39cc1b4d56b8b8ac028e3f3b8ca797f22460befc5e5327f017c682c05e"),
    Linux(:powerpc64le, :glibc) => ("$bin_prefix/LBFGSB.v3.0.0.powerpc64le-linux-gnu.tar.gz", "ebc18cc6838e5d28e393c890b765ac5130ee42226fb93422d478a79a9e70936f"),
    MacOS(:x86_64) => ("$bin_prefix/LBFGSB.v3.0.0.x86_64-apple-darwin14.tar.gz", "8a9eadd212f9d287a153c1d574e9ecc3b448dbefe68172f6b9ed35fed8006d36"),
    Linux(:x86_64, :glibc) => ("$bin_prefix/LBFGSB.v3.0.0.x86_64-linux-gnu.tar.gz", "a7b8648f4a8d904c004fe0912dac6e889f299835862e1b918e0e9eb9ce579d7c"),
    Linux(:x86_64, :musl) => ("$bin_prefix/LBFGSB.v3.0.0.x86_64-linux-musl.tar.gz", "d1d2a5843f4730fc3617422c7bab8c6b03355eb8251dea07f60c503c3982dcd2"),
    FreeBSD(:x86_64) => ("$bin_prefix/LBFGSB.v3.0.0.x86_64-unknown-freebsd11.1.tar.gz", "303f0816133f2e1e3ceb7290dba484d0033b1f7371ca3d0bbaea2e6714ff960d"),
    Windows(:x86_64) => ("$bin_prefix/LBFGSB.v3.0.0.x86_64-w64-mingw32.tar.gz", "45d9fb490229df692f2a4a0ab76afe34f3accdf3bf2db90b0f48de952ec71f3b"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
if haskey(download_info, platform_key())
    url, tarball_hash = download_info[platform_key()]
    if unsatisfied || !isinstalled(url, tarball_hash; prefix=prefix)
        # Download and install binaries
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    end
elseif unsatisfied
    # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform $(triplet(platform_key())) is not supported by this package!")
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
