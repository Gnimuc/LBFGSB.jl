using BinaryProvider

const VERSION = v"3.0.0"

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))

liblbfgsb = LibraryProduct(prefix, ["liblbfgsb", "liblbfgsb-2", "liblbfgsb-3"])
products = [liblbfgsb]

# Download binaries from hosted location
bin_prefix = "https://github.com/Gnimuc/L-BFGS-B-Builder/releases/download/v$VERSION"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    BinaryProvider.Linux(:aarch64, :glibc) => ("$bin_prefix/L-BFGS-B.aarch64-linux-gnu.tar.gz", "b3de6054a39f245a776723bd141d5b411248758a0974f6a7976a3f0578cc9b94"),
    BinaryProvider.Linux(:armv7l, :glibc) => ("$bin_prefix/L-BFGS-B.arm-linux-gnueabihf.tar.gz", "9be37cd1f89718e24c04ff95971d312addaa153ed5be9c14bc5e201609dfa2f5"),
    BinaryProvider.Linux(:i686, :glibc) => ("$bin_prefix/L-BFGS-B.i686-linux-gnu.tar.gz", "57d6ca45cfce8d96677caba03e2fb2a114458d341e4ac95ab18429d159272a2c"),
    BinaryProvider.Windows(:i686) => ("$bin_prefix/L-BFGS-B.i686-w64-mingw32.tar.gz", "092f219449d3004ffaa294d9c21fcf79fafc215e91c24584735cac2fa436576e"),
    BinaryProvider.Linux(:powerpc64le, :glibc) => ("$bin_prefix/L-BFGS-B.powerpc64le-linux-gnu.tar.gz", "17d5afca7f30736b1a755433b3806ab9eac30ca06ba607ad9b166c09915a203a"),
    BinaryProvider.MacOS() => ("$bin_prefix/L-BFGS-B.x86_64-apple-darwin14.tar.gz", "42387412ffcb4aa759416ee9fa7b1e7425d4ca9313c6c5bf4ade7129ba6523ae"),
    BinaryProvider.Linux(:x86_64, :glibc) => ("$bin_prefix/L-BFGS-B.x86_64-linux-gnu.tar.gz", "a2076bca0ff21270bb73a31d688fc27892b129aa691c7aa0d19bf55a290614f9"),
    BinaryProvider.Windows(:x86_64) => ("$bin_prefix/L-BFGS-B.x86_64-w64-mingw32.tar.gz", "60469973f0cc21220a7d94b829cfb075dad3ee67f3eec18e6be01b952009063a"),
)

if platform_key() in keys(download_info)
    # First, check to see if we're all satisfied
    if any(!satisfied(p; verbose=verbose) for p in products)
        # Download and install binaries
        url, tarball_hash = download_info[platform_key()]
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    end
    # Finally, write out a deps.jl file that will contain mappings for each
    # named product here: (there will be a "libfoo" variable and a "fooifier"
    # variable, etc...)
    @write_deps_file liblbfgsb
else
    error("Your platform $(Sys.MACHINE) is not supported by this package!")
end
