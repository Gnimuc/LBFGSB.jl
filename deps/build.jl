using BinaryProvider

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, String["liblbfgsb"], :liblbfgsb),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/Gnimuc/L-BFGS-B-Builder/releases/download/v3.0.1"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    BinaryProvider.Linux(:aarch64, :glibc) => ("$bin_prefix/LBFGSB.aarch64-linux-gnu.tar.gz", "ba620b138838fe5d65f3eeb103d3df485706e1270c89c7507ab261e235221011"),
    BinaryProvider.Linux(:armv7l, :glibc) => ("$bin_prefix/LBFGSB.arm-linux-gnueabihf.tar.gz", "05918f18b1b2a18e68de816b57362759e4c532a6eda82efd6446920be1185d77"),
    BinaryProvider.Linux(:i686, :glibc) => ("$bin_prefix/LBFGSB.i686-linux-gnu.tar.gz", "470b03f4f0e60d23fd35d885c5f36de0193c706e153a410dfbb48ca5ecb473ae"),
    BinaryProvider.Windows(:i686) => ("$bin_prefix/LBFGSB.i686-w64-mingw32.tar.gz", "c89670709da0748c50ad5da98c546850c86d1d68305a7e766994dcc7bfda8dfa"),
    BinaryProvider.Linux(:powerpc64le, :glibc) => ("$bin_prefix/LBFGSB.powerpc64le-linux-gnu.tar.gz", "b00f63b2a8a0a7fe645dbb59ff7c53969911f751cc586b1919e9b66b546be6e5"),
    BinaryProvider.MacOS() => ("$bin_prefix/LBFGSB.x86_64-apple-darwin14.tar.gz", "7dd89d4b082c0b35f90bccbb98994e9032ada7c44267de47b0a2f46a60f484d2"),
    BinaryProvider.Linux(:x86_64, :glibc) => ("$bin_prefix/LBFGSB.x86_64-linux-gnu.tar.gz", "03d2e0b5d43bb4730e5c8f8b27bfce0baddc07990d1e82cb53b215adef7a1261"),
    BinaryProvider.Windows(:x86_64) => ("$bin_prefix/LBFGSB.x86_64-w64-mingw32.tar.gz", "943cc9b2259991c567a3641f868da4246bdf423231d6df149805b0f5bc754a4a"),
)

# First, check to see if we're all satisfied
if any(!satisfied(p; verbose=verbose) for p in products)
    if haskey(download_info, platform_key())
        # Download and install binaries
        url, tarball_hash = download_info[platform_key()]
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    else
        # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
        # Alternatively, you could attempt to install from a separate provider,
        # build from source or something more even more ambitious here.
        error("Your platform $(Sys.MACHINE) is not supported by this package!")
    end
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
