using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["liblbfgsb"], :liblbfgsb),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/Gnimuc/L-BFGS-B-Builder/releases/download/v3.0.0-4"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc, compiler_abi=CompilerABI(:gcc4)) => ("$bin_prefix/LBFGSB.v3.0.0.aarch64-linux-gnu-gcc4.tar.gz", "23f57221b00207aea3fdbfa47f3ea5ab0259e54fd8a0becdb0e4322bebeb7028"),
    Linux(:aarch64, libc=:glibc, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/LBFGSB.v3.0.0.aarch64-linux-gnu-gcc7.tar.gz", "dbee11b2df4d90894395ae520722725587b4ccc83207ceb086d49cdfe7d29397"),
    Linux(:aarch64, libc=:glibc, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/LBFGSB.v3.0.0.aarch64-linux-gnu-gcc8.tar.gz", "bbf5ed1a38ad0864549f3f3c0d8755dbc5c711e3b616698a5ad9b6e22646d035"),
    Linux(:aarch64, libc=:musl, compiler_abi=CompilerABI(:gcc4)) => ("$bin_prefix/LBFGSB.v3.0.0.aarch64-linux-musl-gcc4.tar.gz", "4f7b79470088df2e8be67d364c6ea1d590c287e51b64e145b52d3f0756d574d9"),
    Linux(:aarch64, libc=:musl, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/LBFGSB.v3.0.0.aarch64-linux-musl-gcc7.tar.gz", "3499e97e963540aa716580a2ef06565523f4659b36459b2a608269f19df19a63"),
    Linux(:aarch64, libc=:musl, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/LBFGSB.v3.0.0.aarch64-linux-musl-gcc8.tar.gz", "adaec2503e42996240f7fd0795fb3076b0213c153be00118de636c648334c663"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf, compiler_abi=CompilerABI(:gcc4)) => ("$bin_prefix/LBFGSB.v3.0.0.arm-linux-gnueabihf-gcc4.tar.gz", "a3fe59c21a89ad06655be5fb24bc8149f2d0e3c1e9f4a18baa03c6c39d406dbd"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/LBFGSB.v3.0.0.arm-linux-gnueabihf-gcc7.tar.gz", "9b1ffe5dc109c77ec5aeed6089424817006798543449363271cfd9db8e8e7c5c"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/LBFGSB.v3.0.0.arm-linux-gnueabihf-gcc8.tar.gz", "a00ff4976fa086a9f0186cb17f7c5ac9544da8fcc88314dea562438e6f8158a7"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf, compiler_abi=CompilerABI(:gcc4)) => ("$bin_prefix/LBFGSB.v3.0.0.arm-linux-musleabihf-gcc4.tar.gz", "9af1a6493884fdb614e46b9b686b2c5d0848105cfedf553d53d63df706424e4f"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/LBFGSB.v3.0.0.arm-linux-musleabihf-gcc7.tar.gz", "aa628f86d6a4b1122296a37053ddce94f561545c4fd947770964a113e3afb1c0"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/LBFGSB.v3.0.0.arm-linux-musleabihf-gcc8.tar.gz", "c16e58a9eb0125afae6f051f34ef82c0c2c624442d8ffd30cb118fed9c3d4654"),
    Linux(:i686, libc=:glibc, compiler_abi=CompilerABI(:gcc4)) => ("$bin_prefix/LBFGSB.v3.0.0.i686-linux-gnu-gcc4.tar.gz", "aa41b85947ca719c91d5bec81e3622657daa3db46d61ea19310b546f348d0d06"),
    Linux(:i686, libc=:glibc, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/LBFGSB.v3.0.0.i686-linux-gnu-gcc7.tar.gz", "e3109b9f6b7a15e180ebb7eaf5b3d86bac0ee6b389bb3b0cdb6817f0f8c53848"),
    Linux(:i686, libc=:glibc, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/LBFGSB.v3.0.0.i686-linux-gnu-gcc8.tar.gz", "328370529ef5975c32b73947723756cee20dc326d99b1b571eccaefc3fded515"),
    Linux(:i686, libc=:musl, compiler_abi=CompilerABI(:gcc4)) => ("$bin_prefix/LBFGSB.v3.0.0.i686-linux-musl-gcc4.tar.gz", "632159088272a9e3f2d4012ed17d1c7b20bc17f42f84de7de9e365c4aa0cec58"),
    Linux(:i686, libc=:musl, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/LBFGSB.v3.0.0.i686-linux-musl-gcc7.tar.gz", "068c9fab3586284a1ac2254045caaddb138d675af8b2a4a560e6b17e91207cd2"),
    Linux(:i686, libc=:musl, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/LBFGSB.v3.0.0.i686-linux-musl-gcc8.tar.gz", "1d8b4a61f6a660af350d7cb2fa328e3b304cfeb9a89703ac4edde7b2c7a2bc94"),
    Windows(:i686, compiler_abi=CompilerABI(:gcc4)) => ("$bin_prefix/LBFGSB.v3.0.0.i686-w64-mingw32-gcc4.tar.gz", "26a55bb7b26cb0cc86450398b39c19117ae99f1bde2dac13d09dd416bbbae974"),
    Windows(:i686, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/LBFGSB.v3.0.0.i686-w64-mingw32-gcc7.tar.gz", "03f050fcbc7de59462958dc1f25cd6c7c2414699d77b7bd9b5216b75ff7d8108"),
    Windows(:i686, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/LBFGSB.v3.0.0.i686-w64-mingw32-gcc8.tar.gz", "f06f4d081a9905631fa65b3a7c3110191f510c0abd76a1e126d07894ac65d547"),
    MacOS(:x86_64, compiler_abi=CompilerABI(:gcc4)) => ("$bin_prefix/LBFGSB.v3.0.0.x86_64-apple-darwin14-gcc4.tar.gz", "30a7d474683a81e3660fbeeb67f61ef8c65b7a70c69d8c69ae1f753fab7a1f03"),
    MacOS(:x86_64, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/LBFGSB.v3.0.0.x86_64-apple-darwin14-gcc7.tar.gz", "2b92456c7079250b250a8a3f9180b87ec5b8dc99fcfb242b5ae87c88bc015bd7"),
    MacOS(:x86_64, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/LBFGSB.v3.0.0.x86_64-apple-darwin14-gcc8.tar.gz", "b8ac9f22b615be6221b180ecb0f4103ef0b5329d32aa627f4ec3b91ea6e0cc43"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc4)) => ("$bin_prefix/LBFGSB.v3.0.0.x86_64-linux-gnu-gcc4.tar.gz", "8314817ca1d03a4220489596a13cf9cebbfa479e715d980073ef0f02f1130990"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/LBFGSB.v3.0.0.x86_64-linux-gnu-gcc7.tar.gz", "9c785613d41d0bf4f91382d4b1f538899ca8c7f921378a49e2f50869b98bc391"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/LBFGSB.v3.0.0.x86_64-linux-gnu-gcc8.tar.gz", "22da2afea82fb2ebb7e5be5787e0bcf0ef06d01bee503d4a555876fb7a7528b6"),
    Linux(:x86_64, libc=:musl, compiler_abi=CompilerABI(:gcc4)) => ("$bin_prefix/LBFGSB.v3.0.0.x86_64-linux-musl-gcc4.tar.gz", "38a5c1be469ee71ee1f3758b35b12567209c65b112a169d42926bc89d998af83"),
    Linux(:x86_64, libc=:musl, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/LBFGSB.v3.0.0.x86_64-linux-musl-gcc7.tar.gz", "572f4baae2771b8d9a70c4c2abeea7305951ac68e1c76d832817aead9bfbb949"),
    Linux(:x86_64, libc=:musl, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/LBFGSB.v3.0.0.x86_64-linux-musl-gcc8.tar.gz", "133ed7f143cbcd340c3ad71abe628c2c36d8243e409552dada927df81d52689c"),
    FreeBSD(:x86_64, compiler_abi=CompilerABI(:gcc4)) => ("$bin_prefix/LBFGSB.v3.0.0.x86_64-unknown-freebsd11.1-gcc4.tar.gz", "4bab69986c90343c013c2236e6966b57255e45b2b01b85a8ffe656aead9a3f9c"),
    FreeBSD(:x86_64, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/LBFGSB.v3.0.0.x86_64-unknown-freebsd11.1-gcc7.tar.gz", "d1c023669a2a673498430e73d2e289168079a8da29d20d58e4b20122b4380c52"),
    FreeBSD(:x86_64, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/LBFGSB.v3.0.0.x86_64-unknown-freebsd11.1-gcc8.tar.gz", "0aceb7924aa62f1eb74c57f713ef991e2c631c4c7b7967e33d428b9f3ebdb8b1"),
    Windows(:x86_64, compiler_abi=CompilerABI(:gcc4)) => ("$bin_prefix/LBFGSB.v3.0.0.x86_64-w64-mingw32-gcc4.tar.gz", "55ffcb4b74b0ac69ae5905c764d918a53fda755df6e88d10b3b4fe20bfbd29af"),
    Windows(:x86_64, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/LBFGSB.v3.0.0.x86_64-w64-mingw32-gcc7.tar.gz", "1e301268f9a93475fdffecbc12581a7db6bb01ed8da746f29181be24297bef12"),
    Windows(:x86_64, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/LBFGSB.v3.0.0.x86_64-w64-mingw32-gcc8.tar.gz", "6b1ebad9927078d6477f94b4bfd829855a7d4cbaaa02075b697476764b9db988"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
